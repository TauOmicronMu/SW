
/**
 * Underlying logic for the Minesweeper game.
 * @author txg523
 */
public class Minesweeper {
	private int size;
	private int minesAmount;
	private Cell[][] board;
	private Random random;
	
	/**
	 * Create a new Minesweeper object.
	 * @param size The size of the board.
	 * @param minesAmount The number of mines.
	 */
	public Minesweeper(int size, int minesAmount) {
		//Don't try and create a board with more mines than available cells.
		if minesAmount > size * size {
			throw new IllegalArgumentException(""
					+ " You can't have more mines than "
					+ " there are cells in the board. ")
		}
		this.size = size;
		this.minesAmount = minesAmount;
		this.board = new Cell[minesAmount][minesAmount];
		this.random = new Random();
	    reset();
	}
	
	/**
	 * Generates a new board.
	 */
	public void reset() {
		// Generate a blank board.
		for(int i = 0; i < this.board.length; i++) {
			for(int j = 0; j < this.board[].length; j++) {
				this.board[i][j] = new Cell();
 			}
		}
		// Add the mines.
		int minesPlaced = 0;
		while(minesPlaced != this.minesAmount) {
			x = random.nextInt(100);
			y = random.nextInt(100);
			// If this cell isn't a mine, place one.
			if(!this.board[x][y].isMine()) {
				this.board[x][y].setMine(true);
				minesPlaced++;
			}
		}
	}
	
	/**
	 * Returns the size of the board.
	 * @return the board size.
	 */
	public int getSize() {
		return this.size;
	}
	
	/**
	 * A single cell on the board.
	 * @author txg523
	 */
	private static class Cell {
		private boolean mine;
		private boolean revealed;
		
		private Cell() {
			this.mine = false;
			this.revealed = false;
		}
		
		public boolean isMine() {
			return this.mine;
		}
		
		public boolean isRevealed() {
			return this.revealed;
		}
		
		public void setMine(boolean b) {
			this.mine = b;
		}
		
		public void setRevealed(boolean b) {
			this.revealed = b;
		}
	}
}
